#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "mb_interface.h"

#define OPCODE_RESET   4
#define OPCODE_STORE_X 0
#define OPCODE_STORE_Y 1
#define OPCODE_STORE_T 2
#define OPCODE_STORE_A 5
#define OPCODE_COMPUTE 3

unsigned int reset()
{
	unsigned int inst = 0; // don't care
	inst = ((OPCODE_RESET << 29) | inst);
	return inst;
}

unsigned int store_x(unsigned int x, unsigned int i, unsigned int j)
{
	unsigned int inst = (x & 0x007fffff);
	inst = ((j << 23) & 0x03800000) | inst;
	inst = ((i << 26) & 0x1C000000) | inst;
	inst = (OPCODE_STORE_X << 29) | inst;
	return inst;
}

unsigned int store_y(unsigned int y, unsigned int i)
{
	unsigned int inst = (y & 0x03ffffff);
	inst = ((i << 26) & 0x1C000000) | inst;
	inst = (OPCODE_STORE_Y << 29) | inst;
	return inst;
}

unsigned int store_t(unsigned int t, unsigned int i)
{
	unsigned int inst = (t & 0x03ffffff);
	inst = ((i << 26) & 0x1C000000) | inst;
	inst = (OPCODE_STORE_T << 29) | inst;
	return inst;
}

unsigned int store_a(unsigned int a)
{
	unsigned int inst = (a & 0x03ffffff);
	inst = (OPCODE_STORE_A << 29) | inst;
	return inst;
}

unsigned int compute(unsigned int iter)
{
	unsigned int inst = iter;
	inst = ((OPCODE_COMPUTE << 29) | inst);
	return inst;
}

int main()
{
	init_platform();

    int m = 3;
    int n = 3;

    unsigned int X[3][3] = {{1,2,5},{1,3,6},{1,4,7}};
    unsigned int Y[] = {0,1,2};
    unsigned int T[] = {1,2,2};

    // Reset coprocessor
    putfsl(reset(), 0);

    // Store X matrix
    for (unsigned int i = 0; i < m; i++) {
        for (unsigned int j = 0; j < n; j++) {
        	unsigned int inst = store_x(X[i][j], i, j);
            putfsl(inst, 0);
    		xil_printf("\nStored X[%d][%d] = %d with instruction 0x%08x", i, j, X[i][j], inst);
        }
    }

    // Store Y vector
	for (unsigned int i = 0; i < m; i++) {
		unsigned int inst = store_y(Y[i], i);
		putfsl(inst, 0);
		xil_printf("\nStored Y[%d] = %d with instruction 0x%08x", i, Y[i], inst);
	}

	// Store theta vector
	for (unsigned int i = 0; i < n; i++) {
		unsigned int inst = store_t(T[i], i);
		putfsl(inst, 0);
		xil_printf("\nStored T[%d] = %d with instruction 0x%08x", i, T[i], inst);
	}

	// Store learning rate value
	unsigned int alpha = 3;
	unsigned int inst = store_a(alpha);
	xil_printf("\nStored alpha = %d with instruction 0x%08x", alpha, inst);
	putfsl(inst, 0);

    // Run gradient descent for linear regression until the algorithm converges
	int iter;
    for (iter = 0; iter < 5; iter++) {
		// Issue new iteration of gradient descent
    	unsigned int inst = compute(iter+1);
    	putfsl(inst, 0);
    	xil_printf("\n\nIssued iteration %d of gradient descent with instruction 0x%08x", iter+1, inst);

        // Retrieve new theta vector
    	for (int l = 0; l < n; l++) {
    		getfsl(T[l], 0);
    		xil_printf("\nRetrieved new T[%d] = %d", l, T[l]);
    	}
    }

    xil_printf("\n\nAlgorithm converged in %d iterations!", iter);
    xil_printf("\nLinear regression model is y = ");
    for (unsigned int i = 0; i < n-1; i++) xil_printf("%d*x^%d + ", T[i], i);
    xil_printf("%d*x^%d", T[n-1], n-1);

    cleanup_platform();
    return 0;
}
